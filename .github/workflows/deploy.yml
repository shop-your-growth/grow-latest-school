name: 🚀 GROW YouR NEED - Production Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # 🔍 Code Quality & Security Checks
  quality-checks:
    name: 🛡️ Quality & Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 ESLint Analysis
        run: npm run lint

      - name: 🔒 Security Audit
        run: npm audit --audit-level=moderate

      - name: 📊 Type Checking
        run: npm run type-check

  # 🧪 Automated Testing Suite
  testing:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Application
        run: npm run build

      - name: 🧪 Run Unit Tests
        run: npm run test

      - name: 📊 Generate Coverage Report
        run: npm run test:coverage

      - name: 📈 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # 🐳 Docker Build & Push
  docker-build:
    name: 🐳 Docker Containerization
    runs-on: ubuntu-latest
    needs: [quality-checks, testing]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/grow-your-need:latest
            ${{ secrets.DOCKER_USERNAME }}/grow-your-need:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🚀 Vercel Production Deployment
  deploy-vercel:
    name: 🚀 Deploy to Vercel Production
    runs-on: ubuntu-latest
    needs: [quality-checks, testing]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Production
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # 🌐 Alternative Cloud Deployments
  deploy-alternatives:
    name: 🌐 Multi-Cloud Deployment
    runs-on: ubuntu-latest
    needs: [quality-checks, testing]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        platform: [netlify, railway]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Application
        run: npm run build

      - name: 🚀 Deploy to Netlify
        if: matrix.platform == 'netlify'
        uses: netlify/actions/cli@master
        with:
          args: deploy --prod --dir=.next
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: 🚂 Deploy to Railway
        if: matrix.platform == 'railway'
        uses: bervProject/railway-deploy@v1.0.0
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: grow-your-need

  # 📊 Performance & Monitoring
  performance-monitoring:
    name: 📊 Performance Analysis
    runs-on: ubuntu-latest
    needs: deploy-vercel
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # 🔔 Deployment Notifications
  notify-success:
    name: 🔔 Success Notifications
    runs-on: ubuntu-latest
    needs: [deploy-vercel, docker-build, performance-monitoring]
    if: success()
    steps:
      - name: 🎉 Slack Success Notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 GROW YouR NEED successfully deployed to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-failure:
    name: 🚨 Failure Notifications
    runs-on: ubuntu-latest
    needs: [deploy-vercel, docker-build]
    if: failure()
    steps:
      - name: 🚨 Slack Failure Notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ GROW YouR NEED deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
